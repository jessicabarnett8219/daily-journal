(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const apiHandler = {
  saveNewEntry: function (object) {
    return fetch("http://localhost:8088/entries/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(object)
    });
  },
  loadExistingEntries: function () {
    return fetch("http://localhost:8088/entries/").then(entries => entries.json()).then(entries => entries);
  }
};
var _default = apiHandler;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _entryComponent = _interopRequireDefault(require("./entryComponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let entryLog = document.querySelector(".entryLog"); // function to loop over the entries array and add to DOM

const addEntriesToDOM = entries => {
  let fragment = document.createDocumentFragment();
  entries.forEach(entry => {
    let entryComponent = (0, _entryComponent.default)(entry);
    fragment.appendChild(entryComponent);
  });
  entryLog.appendChild(fragment);
};

var _default = addEntriesToDOM;
exports.default = _default;

},{"./entryComponent":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// function to make HTML component
const makeEntryComponent = journalObject => {
  let entryComponent = document.createElement("section");
  entryComponent.className = "entry";
  let currentConcept = document.createElement("h2");
  currentConcept.textContent = journalObject.concept;
  entryComponent.appendChild(currentConcept);
  let currentDate = document.createElement("h3");
  currentDate.textContent = journalObject.date;
  entryComponent.appendChild(currentDate);
  let currentEntry = document.createElement("p");
  currentEntry.textContent = journalObject.entry;
  entryComponent.appendChild(currentEntry);
  let currentMood = document.createElement("p");
  currentMood.textContent = journalObject.mood;
  entryComponent.appendChild(currentMood);
  return entryComponent;
};

var _default = makeEntryComponent;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

var _entriesDOM = _interopRequireDefault(require("./entriesDOM"));

var _data = _interopRequireDefault(require("./data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_data.default.loadExistingEntries().then(entries => (0, _entriesDOM.default)(entries));

const submitBtn = document.querySelector("#submitBtn");
submitBtn.addEventListener("click", event => {
  let dateInput = document.querySelector("#dateInput");
  let conceptInput = document.querySelector("#conceptInput");
  let entryTextInput = document.querySelector("#entryTextInput");
  let moodInput = document.querySelector("#moodInput");
  const journalEntryObject = {
    date: dateInput.value,
    concept: conceptInput.value,
    entry: entryTextInput.value,
    mood: moodInput.options[moodInput.selectedIndex].value
  };
  $(".entryLog").empty();

  _data.default.saveNewEntry(journalEntryObject).then(data => _data.default.loadExistingEntries(data)).then(entries => (0, _entriesDOM.default)(entries));

  dateInput.value = "";
  conceptInput.value = "";
  entryTextInput.value = "";
  moodInput.selectedIndex = 0;
});
const radioBtns = document.getElementsByName("mood");
radioBtns.forEach(radioBtn => {
  radioBtn.addEventListener("click", event => {
    $(".entryLog").empty();
    let currentMood = event.target.value;

    _data.default.loadExistingEntries().then(entries => {
      return entries.filter(entry => {
        return entry.mood === currentMood;
      });
    }).then(returns => {
      (0, _entriesDOM.default)(returns);
    });
  });
});

},{"./data":1,"./entriesDOM":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
